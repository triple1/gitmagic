== Podstawowe sztuczki ==

Zamiast nurkować od razu w morzu poleceń Git, używaj na początek tych podsawowych przykładów. Każdy z nich jest użyteczny mimo swojej prostoty. Tak naprawdę w pierwszych miesiącach mojej przygody z Git nigdy nie wyszedłem poza materiał z tego rozdziału.

=== Zapisywanie Stanu ===

Zamierzasz zrobić coś drastycznego? Zanim to zrobisz, wykonaj migawkę wszystkich plików w aktualnym katalogu poleceniem:

 $ git init
 $ git add .
 $ git commit -m "Mój pierwszy backup"

Teraz, jeśli Twoje edycje okazały się chybione, przywróć poprzednią, nieskazitelną wersję:

 $ git reset --hard

Aby znowy zapisan stan:

 $ git commit -a -m "Kolejny backup"

=== Dodaj, Usuń, Zmień nazwę ===

Poprzedni paragraph odnosi się jedynie do plików, które istnieją kiedy pierwszy raz wykonujesz *git add*. Jeśli dodasz nowe pliki lub podkatalogi, będziesz musiał poinformować o tym Git:

 $ git add readme.txt Documentation

Analogicznie, jeśli będziesz chciał aby Git zapomniał o pewnych plikach:

 $ git rm kludge.h obsolete.c
 $ git rm -r incriminating/evidence/

Jeśli sam nie usunąłeś wcześniej tych plików, Git zrobi to za Ciebie.

Zmiana nazwy pliku jest tym samym co usunięcie starej nazwy I dodanie nowej. Istnieje do tego skrót *git mv*, który ma taką samą składnię jak polecenie *mv*, na przykład: 

 $ git mv bug.c feature.c

=== Zaawansowane  Cofnij/Przywróć ===

Czasami chcesz po prostu wrócić do porzedniej wersji I zapomnieć o wszystkich zmianach, które po niej nastąpiły, ponieważ wszystkie były błędne. Robisz wtedy tak:

 $ git log

Pokazuje Ci listę ostatnich commits (zapisów) i ich sumy kontrolne SHA1:


----------------------------------
commit 766f9881690d240ba334153047649b8b8f11c664
Author: Bob <bob@example.com>
Date:   Tue Mar 14 01:59:26 2000 -0800

    Replace printf() with write().

commit 82f5ea346a2e651544956a8653c0f58dc151275c
Author: Alice <alice@example.com>
Date:   Thu Jan 1 00:00:00 1970 +0000

    Initial commit.
----------------------------------

Pierwsze kilka znaków sumy kontrolnej wystarczą aby jednoznacznie określić commit, alternatywnie możesz skopiować i wkleić całą sumę. Napisz: 

 $ git reset --hard 766f

Żeby przywrócić stan konkretnego commit’a i wymazać nieodwracalnie wszystkie nowsze od niego.

Innym razem możesz chcieć jedynie skoczyć na chwilę do poprzedniego stanu. W taki przypadku użyj napisz:

 $ git checkout 82f5

To polecenie zabierze Cię z powrotem w czasie, ale zachowuje wszystko co się stało później. Jednakże, tak jak z podróżami w czasie w filmach science-fiction, jeśli teraz coś zmienisz to znajdziesz się w alternatywnej rzeczywistości, ponieważ Twoje zmiany są inne niż te, stworzone kiedy tu byłeś pierwszy raz. 

Ta alternatywna rzeczywistość nazywa się 'branch' ( gałąź ) i <<branch, o niej pomówimy później>>. Na razie, po prostu zapamiętaj, że 

 $ git checkout master

zabierze Cię z powrotem do teraźniejszości. Dodatkowo, żeby Git przestał narzekać, zawsze wykonuj polecenie commit lub reset przed używaniem checkout. 

Przekładając to na analogię do gry komputerowej: 

- *`git reset --hard`*: wczytaj stary save i usuń wszystkie nowsze od niego.

- *`git checkout`*: wczytaj starą grę, ale jeśli zagrasz, to stan gry zmieni się w stosunku do poprzedniego i zapisów gry które powstały po nim. Jakiekolwiek zapisy gry znajdą się w nowym branch ( gałęzi ) odzwierciedlającej alternatywną rzeczywistość, w której się znalazłeś. <<branch, Tym zajmiemy się później>>.

Możesz wybrać tylko konkretne pliku I podkatalogi, które chcesz przywrócić, przez podanie ich nazw na końcu polecenia:

 $ git checkout 82f5 some.file another.file

Uważaj, bo taka forma *checkout* może po cichu nadpisać pliki. Żeby zapobiec wypadkom, zawsze wykonuj commit przed używaniem jakiekolwiek komendy checkout, zwłaszcza gdy się uczysz Git. Co do zasady, zawsze kiedy nie jesteś pewny wyniku jakiejś komendy, najpierw użyj polecenia *git commit -a*.

Nie lubisz kopiowania i wklejania sum kontrolnych? Możesz użyć: 

 $ git checkout :/"My first b"

żeby przeskoczyć do commit’a, który zaczyna się od podanej wiadomości. Możesz również poprosić o powrót do 5-tego liczonego od najświeższego zapisanego stanu:

 $ git checkout master~5

=== Powracanie ===

W prawie sądowym wydarzenia mogą być wymazane z zapisów. Podobnie możesz wybrać który konkretnie commit chcesz cofnąć: 

 $ git commit -a
 $ git revert 1b6d

cofnie jedynie commit o podanej sumie kontrolnej. Takie cofnięcie zostaje odnotowane jako nowy commit, który to fakt możesz potwierdzić wydając polecenie *git log*. 

=== Generowanie Logu Zmian ===

Niektóre projekty potrzebują http://pl.wikipedia.org/wiki/Changelog [changelog]. Możesz go stworzyć w ten sposób:

 $ git log > ChangeLog

=== Ściąganie plików ===

Kopię prijektu zarządzanego przez Git możesz ściągnąć w ten sposób: 

 $ git clone git://server/ścieżka/do/plików

Na przykład, żeby ściągnąć wszystkie pliki potrzebne do stworzenia tej strony: 

 $ git clone git://git.or.cz/gitmagic.git

Niedługo napiszę o wiele więcej o poleceniu *clone*.

=== Najnowsza Wersja ===

Jeśli już ściągnąłeś kopię projektu używając *git clone*, to możesz aktualizować ją do najnowszej wersji za pomocą: 

 $ git pull

=== Natychmiastowe Publikowanie ===

Przypuśćmy, że napisałeś skrypt, którym chciałbyś się podzielić z innymi. Możesz im po prostu powiedzieć żeby ściągnęli go z Twojego komputera, ale jeśli to zrobią w czasie, kiedy poprawiasz ten skrypt lub dokonujesz jakichś eksperymentalnych zmian, mogą wpaść w kłopoty. Oczywiście właśnie po to istnieje cykl publikacji. Programiści mogą często pracować nad projektem, ale udostępniają kod dopiero, kiedy czują, że jest gotowy. 

Żeby wykonać coś takiego za pomocą Git, wywołaj następujące polecenia w katalogu, w którym znajduje się Twój skrypt: 

 $ git init
 $ git add .
 $ git commit -m "Pierwsza publikacja"

Potem poinformuj innych żeby wykonali polecenie: 

 $ git clone twoj.komputer:/sciezka/do/skryptu

żeby mogli ściągnąć Twój skrypt. Zakładamy, że mają dostęp przez SSH. Jeśli nie, uruchom *demona git* i powiedz im, żeby zamiast poprzedniego wywołali następujące polecenie: 

 $ git clone git://twoj.komputer:/sciezka/do/skryptu 

Od tej pory za każdym razem, gdy Twój skrypt jest gotowy do opublikowania, wykonaj: 

 $ git commit -a -m "Następna publikacja"

A Twoi użytkownicy, będą mogli aktualizować swoją wersję poprzez wejście do katalogu, w którym jest Twój skrypt i wywołanie: 

 $ git pull

Dzięki temu Twoi użytkownicy nigdy nie będą mieli dostępu do wersji, której nie chcesz żeby oglądali. 

=== Co Ja Zrobiłem? ===

Sprawdź jakie zmiany wprowadziłeś od ostatniego commit’a za pomocą: 

 $ git diff

Albo od wczoraj:

 $ git diff "@{yesterday}"

Albo pomiędzy którąś konkretną wersją I 2 wersjami temu: 

 $ git diff 1b6d "master~2"

W każdym przypadku dane wyjściowe są łatką, która może być zastosowana za pomocą *git apply*.
Spróbuj również:

 $ git whatchanged --since="2 weeks ago"

Często przeglądam historię za pomocą http://sourceforge.net/projects/qgit[qgit], ze względu na jego przyjazny interfejs, albo http://jonas.nitro.dk/tig/[tig], program z interfejsem w trybie tekstowym, który działa dobrze w przypadku wolnych łączy.
Alternatywnie zainstaluj serwer WWW, uruchom *git instaweb* i odpal dowolną przeglądarkę. 

=== Ćwiczenia ===

Niech A, B,C, D będą czterema kolejnymi commit’ami, przy czym B jest taki sam jak A, oprócz faktu usunięcia kliku plików. Chcemy dodać te pliki z powrotem do D. Jak to można zrobić? 

Istnieją co najmniej trzy rozwiązania. Zakładając, że jesteśmy w D: 

  1. Różnicą pomiędzy A i B są usunięte pliki. Możemy utworzyć łatkę reprezentującą tą różnicę i zaaplikować ją: 

   $ git diff B A | git apply

  2. Jako, że zapisaliśmy pliki w A, możemy je wyciągnąć za pomocą: 

   $ git checkout A foo.c bar.h

  3. Możemy również spojrzeć na przejście z A do B jako zmianę ( commit ) jaki chcemy cofnąć: 

   $ git revert B

Który wybór jest najlepszy? Ten, który Tobie najbardziej pasuje. Z Git łatwo jest osiągnąć to na czym nam zależy I często istnieje wiele sposobów na to.
