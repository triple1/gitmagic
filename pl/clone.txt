== Wokół Klonowania ==

W starszych wersjach systemów kontroli wersji, checkout jest standardową operacją przeznaczoną do zdobywania plików. W jego wyniku otrzymujesz mnóstwo plików w ich aktualnie zapisanym stanie. 

W Git i innych rozproszonych systemach kontroli wersji standardową operacją jest klonowanie. W celu zdobycia plików tworzysz 'klona' całego repozytorium. Inaczej mówiąc, tworzysz lustrzane odbicie centralnego serwera. Wszystko co może zrobi? główne repozytorium, możesz i Ty. 

=== Synchronizacja Komputerów ===

Mogę tolerować tworzenie archiwów tarball albo używanie *rsync* na potrzeby prostych kopi zapasowych lub synchronizacji. Zdarza się jednak, że edytuję coś na moim laptopie, innym razem na komputerze stacjonarnym, a między czasie mogły one się ze sobą nie porozumiewać. 

Zainicjuj repozytorium Git, dodaj swoje pliki z jednej z maszyn. Potem na drugiej wykonaj: 

 $ git clone inny.komputer:/ścieżka/do/plików

żeby stworzyć kopię plików I repozytorium Git na drugim komputerze. Od tej pory:

 $ git commit -a
 $ git pull inny.komputer:/ścieżka/do/plików HEAD


ściągnie ( pull ) stan plików na drugim z komputerów do tego przy którym obecnie pracujemy. Jeśli ostatnio wykonałeś edycje powodujące konflikty w którymś pliku, Git powie Ci, że powinieneś wykonać commit ponownie, po ich rozwiązaniu. 

=== Klasyczna Kontrola Wersji ===

Zainicjuj repozytorium Git dla swoich plików: 

 $ git init
 $ git add .
 $ git commit -m "Początkowy commit"

Na centralnym serwerze zainicjuj *gołe repozytorium* w jakimś katalogu:

 $ mkdir proj.git
 $ cd proj.git
 $ git init --bare
 $  # wariant jednolinijkowy: GIT_DIR=proj.git git init

Jeśli potrzeba uruchom demona Git: 

 $ git daemon --detach  # może już działać

W przypadku serwisów hostujących Git, ostępuj zgodnie z ich instrukcjami w celu utworzenia pustego repozytorium. Przeważnie odbywa się to poprzez wypełnienie formularza na stronie internetowej.
'Wyślij' (Push) swój projekt do centralnego serwera za pomocą:

 $ git push git://centralny.serwer/ścieżka/do/proj.git HEAD

W celu pobrania źródeł, programista wyda komendę: 

 $ git clone git://centralny.serwer/ścieżka/do/proj.git 

Po dokonaniu zmian, programista zapisuje je lokalnie: 

 $ git commit -a

Aktualizuje project do najnowszej wersji: 

 $ git pull

Po rozwiązaniu mogących się pojawić konfliktów, wykonuje ponownie commit: 

 $ git commit -a

I na końcu wysyła wynik swojej pracy do centralnego repozytoium: 

 $ git push

Jeśli na serwerze pojawiły się jakieś nowe zmiany dokonane przez innych programistów, push się nie uda i trzeba będzie znowu ściągnąć najnowszą wersję ( pull ), rozwiązać potencjalne konflikty I spróbować ponownie. 

=== Gołe Repozytoria ===

Gołe repozytorium nazywa sie tak, ponieważ nie ma katalogu roboczego; zawiera jedynie pliki, które są normalnie ukryte w podkatalogu `.git`. Innymi słowy, zapisuje ono historię projektu, ale nigdy nie przetrzymuje migawki żadnej wersji. 

Gołe repozytorium odgrywa rolę podobną do tej, jaką pełnie główny serwer w zcentralizowanym systemie kontroli wersji: jest to ‘dom’ projektu. Programiści mogą klonować z niego projekty oraz wysyłać do niego najnowsze wersje zmian. Przeważnie znajduje się ono na serwerze, którego rola polega głównie na rozpowszechnianiu danych. Rozwój aplikacji odbywa się w klonach, więc to bazowe repozytorium może sobie poradzić bez swojego katalogu roboczego. 

Wiele komend Git nie zadziała w gołym repozytorium dopóki nie zostanie ustawiona zmienna środowiskowa`GIT_DIR` zawierająca ścieżkę do repozytorium lub nie zostanie podany parametr `--bare`.

=== Push kontra Pull ===

Po co wprowadziliśmy komendę push, zamiast polegać na znajomym poleceniu pull? Po pierwsze pul lnie działa na gołych repozytoriach: zamiast niego trzeba użyć 'fetch', komenda, którą omówimy później. Nawet jeśli na centralnym serwerze trzymamy normalne repozytorium, używanie pull żeby coś do niego wgrać byłoby uciążliwe. Najpierw musielibyśmy się zalogować na serwer, a następnie wykonać polecenie pull z adresu z jakiego chcemy wgrać zmiany. Przeszkadzać w tym mogą firewall’e ( zapory ogniowe ) albo co w sytuacji, w której nie mamy dostępu do powłoki tego serwera? 

Niemniej, pomijając taki przypadek, raczej zniechęcamy do używania polecenia push, ponieważ mogą pojawić się problemy, gdy serwer docelowy posiada katalog roboczy. 

W skrócie: w czasie nauki Git, wykonuj push jedynie, kiedy celem jest gołe repozytorium; w pozostałych przypadkach wykonuj pull. 

=== Rozwidlanie Projektu ===

Masz już dość tego jak prowadzony jest jakiś projekt? Myślisz, że zrobiłbyś to lepiej? W takim razie wykonaj na swoim serwerze: 

 $ git clone git://główny.serwer/ścieżka/do/plików

Następnie powiedz wszystkim o rozwidleniu projektu na Twój serwer. 

W każdym momencie możesz scalić zmiany z oryginalnego projektu używając: 

 $ git pull

=== Niezniszczalne Kopie Zapasowe ===

Chcesz mieć wiele bezpiecznych, redundantnych archiwów położonych w zróżnicowanych geograficznie lokalizacjach? Jeśli Twój projekt ma wielu programistów, nic nie rób! Każdy klon Twojego kodu jest kopią zapasową. Nie tylko stanu aktualnego projektu, ale całej historii zmian. Jeśli czyjakolwiek kopia zostanie uszkodzona, to dzięki generowanym sumom kontrolnym, fakt ten zostanie od razu zauważony przy pierwszej próbie kontaktu z innymi repozytoriami. 

Jeśli Twój projekt nie jest szczególnie popularny, znajdź tyle serwerów mogących przechowywać jego klony, ile tylko dasz radę. 

Ktoś naprawdę paranoidalny powinien zawsze przechowywać ostatni 20-bajtowy skrót sumy kontrolnej ( SHA1 ) HEAD, w jakimś bezpiecznym miejscu. Musi to być miejsce bezpieczna a nie koniecznie prywatne. Na przykład, opublikowanie go w gazecie powinno spełnić to zadanie, ponieważ komuś atakującemu raczej ciężko będzie zmienić ten zapis w każdej jej kopii. 

=== Wielozadaniowość z Prędkością Światła ===

Przypuśćmy, że chciałbyś pracować nad kilkoma funkcjami równolegle.W taki przypadku wykonaj commit i napisz: 

 $ git clone . /jakiś/nowy/katalog

Dzięki http://pl.wikipedia.org/wiki/Dowi%C4%85zanie_twarde [dowiązaniom twardym], lokalne klony wymagają mniej czasu i przestrzeni niż normalna kopia zapasowa. 

Od tej pory możesz pracować nad dwiema niezależnymi funkcjami programu w tym samym czasie. Na przykład możesz edytować jednego klona, w czasie gdy drugi się kompiluje. W każdy momencie możesz wykonać commit i ściągnąć zmiany z drugiego klona ( pull ): 


 $ git pull /drugi/klon HEAD

=== Partyzancka Kontrola Wersji ===

Pracujesz nad jakimś projektem, który obecnie używa innego system kontroli wersji i bardzo tęsknisz za Git? Zainicjuj nowe repozytorium Git w swoim katalogu roboczym: 

 $ git init
 $ git add .
 $ git commit -m "Początkowy commit"

sklonuj go:

 $ git clone . /nowy/katalog

Teraz przejdź do nowego katalogu i pracuj tam, używając Git. Raz na jakiś czas, kiedy będziesz chciał zsynchronizować pracę z innymi, przejdź z powrotem do oryginalnego katalogu, zsynchronizuj owoce swojej pracy z innymi, a następnie napisz: 

 $ git add .
 $ git commit -m "Synchronizacja z innymi"

Potem przejdź do nowego katalogu i wykonaj:

 $ git commit -a -m "Opis moich zmian"
 $ git pull

Procedura udostępniania swoich zmian innym zależy od tego drugiego systemu kontroli wersji. Nowy katalog zawiera pliki z Twoimi zmianami. Wykonaj operacje potrzebne aby wysłać pliki to centralnego repozytorium drugiego systemu kontroli wersji. 

Sybversion, prawdopodobnie najlepszy zcentralizowany system kontroli wersji, jest obecnie używany w niezliczonych projektach. Komenda *git svn* automatyzuje wcześniej opisane operacje w kontaktach z repozytorium Subversion oraz może być użyty do http://google-opensource.blogspot.com/2008/05/export-git-project-to-google-code.html [eksportowania projektu Git do repozytorium Subversion]. 

=== Mercurial ===

Mercurial jest podobnym do Git systemem kontroli wersji, który może gładko z nim współpracować. Użytkownik Mercurial może za pomocą wtyczki hg-git bezstratnie wykonywać polecenia push i pull do repozytorium Git.

Wtyczkę hg-git można pobrać stąd za pomocą Git: 

 $ git clone git://github.com/schacon/hg-git.git

lub Mercurial:

 $ hg clone http://bitbucket.org/durin42/hg-git/

Niestety nie znam analogicznej wtyczki dl Git’a. Z tego powodu opowiadam się za stosowaniem Git a nie Mercurial jako głównego repozytorium, nawet jeśli preferujesz Mercurial. W przypadku projektów Mercurial, najczęściej ochotnik utrzymuje równolegle repozytorium Git, aby udostępnić go użytkownikom Git, natomiast używając wtyczki `hg-git`, repozytorium Git robi to automatycznie dla użytkowników Mercurial. 

Jakkolwiek ta wtyczka umie przekonwertować repozytorim Mercurial do Git’a przez wykonanie push do pustego repozytorium, to zadanie można łatwiej wykonać za pomocą skryptu `hg-fast-export.sh`, dostępnego tutaj: 

 $ git clone git://repo.or.cz/fast-export.git

Aby wykonać konwersję, wykonaj w pustym katalogu: 

 $ git init
 $ hg-fast-export.sh -r /hg/repo

Oczywiście po dodaniu tego skryptu do `$PATH`.

=== Bazaar ===

Krótko wspomnimy o Bazaar, ponieważ jest to, zaraz po Git I Mercurial, najpopularniejszy rozproszony system kontroli wersji. 

Bazaar ma przewagę patrzenia z perspektywy czasu, ponieważ jest stosunkowo młody; jego projektanci mogli się uczyć na błędach z przeszłości i ominąć niektóre mniejsze potknięcia. Dodatkowo jego projektanci pamiętali o przenośności i współpracy z innymi systemami kontroli wersji. 

Wtyczka `bzr-git` pozwala w pewnym stopniu na pracę z repozytoriami Git. Program `tailor` konwertuje repozytorium Bazaar na Git I może to wykonywać przyrostowo, natomiast `bzr-fast-export` działa dobrze w przypadku jednorazowych konwersji. 

=== Dlaczego używam Git ===

Na początku wybrałem Git, ponieważ usłyszałem, że można za jego pomocą zarządzać niezarządzalnym źródłem jądra Linux’a. Nigdy też nie czułem potrzeby zmiany. Git spisuje się bardzo dobrze i jego waty mogą mnie dopiero kiedyś spotkać. Jako, że używam przede wszystkim Linux’a, problemy z innymi platformami nie są dla mnie zmartwieniem. 

Dodatkowo, wolę programy napisane w C oraz skrypty Bash niż pliki wykonywalne napisane np. w Python’ie: mają mniej zależności i jestem uzależniony od szybkiego ich działania. 

Myślałem o tym, w jaki sposób Git mógłby być poprawiony, nawet posuwając się do napisania własnego Git-o podobnego narzędzia, ale tylko czysto akademicko. Nawet po ukończeniu tego projektu pozostałem przy Git, ponieważ poprawa była tak niewielka, że nie uzasadniała używania udziwnionego systemu. 

Naturalnie, Twoje potrzeby lub oczekiwania mogą być inne I możę się okazać, że lepiej się dogadasz z innym systemem, jednakże nie wyjdziesz źle na używaniu Git.
