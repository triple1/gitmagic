== Branch Wizardry ==

Natychmiastowe tworzenie gałęzi i łączenie są najbardziej zabójczymi z cech Git. 

*Problem*: zewnętrzne czynniki nieuchronnie wymagają zmiany kontekstu. W wydanej wersji programu objawia się bez uprzedzenia groźny błąd. Termin oddania konkretnej funkcji się zbliża. Programista, którego pomocy potrzebujesz przy jakiejś kluczowej funkcji odchodzi. W tych wszystkich przypadkach musisz nagle rzucić to, co robisz i skupić się na kompletnie innym zadaniu. 

Przerywanie Twojego ciągu myślowego może być szkodliwe dla Twojej produktywności, a im trudniej jest zmienić konteksty, tym większa strata. W przypadku zcentralizowanego systemu kontroli wersji musimy ściągnąć świeżą kopię z serwera. Rozproszone systemy radzą sobie lepiej, jako, że możemy sklonować poszukiwaną wersję lokalnie. 

Ale klonowanie oznacza kopiowanie całego katalogu roboczego wraz z całą historią do danego momentu. Nawet mimo tego, że Git redukuje koszty takiej operacji poprzez dzielenie plików i twarde linki, to pliki należące do projektu muszą zostać odtworzone w całości w nowym katalogu roboczym. 

*Rozwiązanie*: Git oferuje lepsze narzędzie dla takich przypadków, które jest dużo szybsze i oszczędniejsze, jeśli chodzi o przestrzeń dyskową niż klonowanie: *git branch*.

Za pomocą tego magicznego słowa, pliki w Twoim katalogu roboczym nagle zmieniają się z jednej wersji na drugą. Taka transformacja może więcej niż jedynie cofanie się do przeszłości lub wracanie. Twoje pliki mogą się przeistaczać od ostatnim wydaniem, przez eksperymentalne do aktualnie rozwijanej wersji a nawet do wersji aktualnie rozwijanej przez Twojego kolegę i tak dalej. 

=== The Boss Key ===

Czy kiedykolwiek grałeś w jedną z tych gier, w których po naciśnięciu klawisza (``the boss key''), ekran nagle pokaże arkusz kalkulacyjny lub coś innego? Na wypadek gdyby szef nagle wszedł do biura w czasie, gdy grasz mógłbyś szybko ukryć grę? 

W jakimś katalogu: 

 $ echo "Jestem sprytniejszy niż mój szef." > moj_plik.txt
 $ git init
 $ git add .
 $ git commit -m "pocz¹tkowy commit"

Stworzyliśmy repozytorium Git, które śledzi jeden plik zawierający konkretną wiadomość. Teraz napisz: 

 $ git checkout -b boss  # po tym kroku wydaje się, że nic się nie zmieniło
 $ echo "Mój szef jest sprytniejszy ode mnie." > moj_plik.txt
 $ git commit -a -m "kolejny commit"

Wygląda jakbyśmy właśnie nadpisali nasz plik i wykonali commit. Ale to tylko iluzja. Napisz: 

 $ git checkout master  # przełącz się do oryginalnej wersji pliku

i presto! Plik został przywrócony. I jeśli szef zdecyduje się węszyć w tym katalogu, napisz: 

 $ git checkout boss  # przełącz na wersję odpowiednią dla oczu szefa

Możesz przełączać się pomiędzy dwiema wersjami pliku tak często jak tylko chcesz i wykonywać commit na każdej niezależnie. 

=== Brudna Robota ===

[[gałąź]]
Więc jeśli pracujesz nad jakąś funkcją i z jakiegoś powodu chciałbyś wrócić trzy wersje wstecz i tymczasowo umieścić kilka komend print żeby zobaczyć czy wszystko działa, wtedy: 

 $ git commit -a
 $ git checkout HEAD~3

Teraz możesz wszędzie pododawać brzydki tymczasowy kod. Możesz nawet wykonać commit po tych zmianach. Jak skończysz: 

 $ git checkout master

aby wrócić do swojej oryginalnej pracy. Zwróć uwagę, że zatwierdzone zmiany się nie zachowały. 

A co jeśli jednak chcemy zachować tymczasowe zmiany Prosto: 

 $ git checkout -b dirty

i wykonaj commit przed przełączeniem się z powrotem do gałęzi master. Jeśli będziesz chciał wrócić do tych nieładnych zmian, napisz: 

 $ git checkout dirty

Natknęliśmy się na tę komendę we wcześniejszym rozdziale, w czasie omawiania wczytywania poprzednich stanów. Nareszcie możemy opowiedzieć całą historię: zmiany plików do żądanego stanu, ale musimy pozostawić gałąź master. Jakiekolwiek zmiany wykonane od teraz poprowadzą Twoje pliki inną drogą, którą można nazwać później. 

Innymi słowy, po wykonaniu checkout do starego stanu Git automatycznie umieszcza Cię w nowej, nienazwanej gałęzi, która może zostać nazwana i zapisana za pomocą *git checkout -b*. 

=== Szybkie Naprawy ===

Jesteś w trakcie jakiejś pracy, kiedy dostajesz polecenie aby rzucił wszystko i naprawił nowo odkryty błąd w commit `1b6d...`: 

 $ git commit -a
 $ git checkout -b fixes 1b6d

Then once you've fixed the bug:

 $ git commit -a -m "błąd naprawiony"
 $ git checkout master

i podejmij znowu pracę nad swoim wcześniejszym zadaniem. Możesz nawet 'włączyć' (merge) do swojej pracy świeżo upieczoną poprawkę: 

 $ git merge fixes

=== Łączenie ===

W przypadku niektórych systemów kontroli wersji tworzenie nowych gałęzi jest proste, ale łączenie ich z powrotem już nie. W przypadku Git łączenie jest tak trywialne, że możesz nawet nie wiedzieć, że ma ono miejsce. 

Tak naprawdę spotkaliśmy się z łączeniem już dawno temu. Komenda *pull* tak naprawdę 'ściąga' commit’y a następnie łączy je z aktualną gałęzią. Jeśli nie masz żadnych lokalnych zmian to łączenie jest 'fast forward', zubożony przypadek zbliżony do operacji pobierania w zcentralizowanych systemach kontroli wersji. Jeśli jednak istnieją jakieś Twoje zmiany lokalne, Git spróbuje je połączyć automatycznie lub poinformuje Cię o konfliktach. 

Zwykle commit posiada dokładnie jeden 'commit - rodzic', czyli poprzedni commit. Łączenie gałęzi owocuje commit’em, który ma, co najmniej dwóch rodziców. Aż się prosi o pytanie: do którego commit odnosi się `HEAD~10`? Commit może mieć wielu rodziców, więc, do którego wrócimy? 

Okazuje się, że takie zapytanie wybierze za każdym razem pierwszego z rodziców. To jest oczekiwane zachowanie, ponieważ aktualna gałąź zawsze staje się pierwszy z rodziców podczas łączenia; często interesują Cię zmiany wyłącznie z gałęzi master, a nie te z gałęzi połączonych z nią. 

Możesz odnieść się do konkretnego rodzica za pomocą ^. Na przykład, aby pokazać logi zmian drugiego z rodziców: 

 $ git log HEAD^2

Dla pierwszego z rodziców możesz pominąć numer. Na przykład, aby pokazać równice w przypadku pierwszego z rodziców: 

 $ git diff HEAD^

Możesz połączyć tę notację z innymi, na przykład: 

 $ git checkout 1b6d^^2~10 -b ancient

Rozpoczyna gałąź ``ancient'' reprezentującą stan sprzed 10 commit’ów wstecz drugiego z rodziców od commit pierwszego z rodziców zaczynającego się od 1b6d. 

=== Uninterrupted Workflow ===

Często przy projektach sprzętowych, drugi krok w planie musi poczekać na ukończenie pierwszego. Samochód będzie czekał w garażu na przyjście konkretnej części z fabryki. Prototyp może musieć czekać na wyprodukowanie mikroprocesora zanim będzie można kontynuować budowę. 

Projekt dotyczący oprogramowania może być podobny, Druga część jakiejś nowej funkcji może musieć czekać, aż pierwsza zostanie wydana i przetestowana. Niektóre projekty wymagają, aby kod został przejrzany przed zaakceptowaniem, więc możesz musieć czekać na zatwierdzenie pierwszej części przed rozpoczęciem drugiej. 

Dzięki bezbolesnemu łączeniu i gałęziom, możemy nagiąć te zasady i rozpocząć pracę nad drugą częścią przed oficjalnym ukończeniem części pierwszej. Powiedzmy, że wykonałeś commit i wysłałeś pierwszą część do zatwierdzenia. Przypuśćmy również, że znajdujesz się w gałęzi `master`. Utwórz nową gałąź: 

 $ git checkout -b part2

Następnie pracuj nad drugą częścią, zatwierdzaj zmiany, które wykonasz. Błądzić jest rzeczą ludzką, co oznacza, że często możesz chcieć wracać wstecz i naprawiać coś w części pierwszej. Jeśli masz szczęście albo jesteś bardzo dobry możesz pominąć te linijki: 

 $ git checkout master  # wróć do części pierwszej
 $ napraw_problem
 $ git commit -a        # zatwierdź zmiany
 $ git checkout part2   # wróć do części drugiej
 $ git merge master     # połącz master z poprawkami

Ostatecznie część pierwsza zostaje zatwierdzona: 

 $ git checkout master  # wróć do części pierwszej
 $ submit files         # wyślij ją w świat!
 $ git merge part2      # połącz z częścią drugą
 $ git branch -d part2  # usuń gałąź z częścią drugą

Jesteś teraz znowu w gałęzi `master` z częścią drugą w katalogu roboczym. 

Łatwo rozszerzyć tę sztuczkę na dowolną liczbę części projektu. Łatwo jest również tworzyć gałęzie w przeszłości: powiedzmy, że poniewczasie zdałeś sobie sprawę, że powinieneś był stworzyć gałąź 7 commit’ów wstecz. Wykonaj wtedy: 

 $ git branch -m master part2  # zmień nazwę gałęzi "master" na "part2".
 $ git branch master HEAD~7    # stwórz now¹ ga³¹Ÿ "master" 7 commit’ów wstecz

Gałąź `master` zawiera teraz jedynie część pierwszą, a gałąź `part2` całą resztę. Jesteśmy w drugiej z tych gałęzi; stworzyliśmy `master` bez przełączanie się do niej, ponieważ chcemy dalej pracować nad `part2`. To jest raczej niezwykłe, ponieważ do tej pory zmienialiśmy gałęzie zaraz po ich utworzeniu, jak tutaj: 

 $ git checkout HEAD~7 -b master  # Stwórz gałąź i przełącz się na nią.

=== Reorganizing a Medley ===

Być może lubisz pracować nad wszystkimi aspektami projektu w tej samej gałęzi. Chciałbyś trzymać na bieżąco wykonywaną pracę jedynie dla siebie oraz żeby inni widzieli twoje commit’y dopiero jak je ładnie uporządkujesz. Utwórz dwie gałęzie: 

  $ git branch sanitized    # Stwórz gałąź dla wyczyszczonych commit’ów.
  $ git checkout -b medley  # stwórz i przełącz się do gałęzi roboczej

Następnie pracuj na wszystkim: poprawkami błędów, nowymi funkcjami, dodawaj tymczasowy kod i tak dalej, cały czas zatwierdzając zmiany. Następnie: 

  $ git checkout sanitized
  $ git cherry-pick medley^^

Nałożenie dziadka commit’a HEAD gałęzi ``medley''  do gałęzi ``sanitized''. Za pomocą odpowiednich cherry-picks możesz skonstruować gałąź zawierającą jedynie stały kod oraz ma powiązane ze sobą commit’y zgrupowane razem. 

=== Zarządzanie Gałęziami ===

Lista wszystkich gałęzi: 

 $ git branch

Domyślnie zaczynasz zawsze w gałęzi nazwanej ``master''. Są tacy, którzy opowiadają się za pozostawieniem gałęzi ``master'' w spokoju i tworzeniem nowych gałęzi na potrzeby swoich zmian. 

Opcje *-d* i *-m* pozwalają na usuwanie i przenoszenie ( zmianę nazwy ) gałęzi. Zobacz: *git help branch*.

Używanie gałęzi ``master'' jest przydatnym zwyczajem. Inni mogą zakładać, że Twoje repozytorium ma gałąź o takiej nazwie i że ona zawiera w sobie oficjalną wersję projektu. Jednakże możesz zmienić jej nazwę lub ją usunąć, albo po prostu trzymać się konwencji. 

=== Tymczasowe Gałęzie ===

Po jakimś czasie możesz zdać sobie sprawę, że tworzysz krótko żyjące gałęzie z ciągle tych samych powodów: każda z nich służy jedynie do zapisania aktualnego stanu, żeby móc na chwilę skoczyć do starszego stanu i naprawić błąd o wysokim priorytecie lub coś podobnego. 

To jest podobne do zmiany kanału telewizyjnego na chwilę, aby zobaczyć, co jest pokazywane na innych. Tylko, że przeciwieństwie do naciśnięcia kliku guzików, musisz stworzyć, wykonać checkout, połączyć i usunąć tymczasowe gałęzie. Na szczęście Git oferuje skrót równie wygodny, co pilot do telewizora: 

 $ git stash

To polecenie zapisuje aktualny stan w tymczasowej lokalizacji ('stash', czyli schowek ) i przywraca poprzedni stan. Twój katalog roboczy wygląda teraz dokładnie tak, jak zanim zacząłeś go zmieniać, a Ty możesz naprawić błędy, zaciągnąć zmiany itd. Kiedy chcesz wrócić do zachowanego stanu napisz: 

 $ git stash apply  # Możesz musieć rozwiązać powstałe konflikty

Możesz mieć wiele schowków i manipulować nimi na przeróżne sposoby. Zobacz *git help stash*. Jak pewnie się domyślasz, Git zarządza gałęziami za kulisami, aby wykonać tą magiczną sztuczkę. 

=== Pracuj Jak Chcesz ===

Możesz się zastanawiać, czy gałęzie są warte zachodu. W końcu klonowanie jest tak samo szybkie i możesz przechodzić pomiędzy nimi za pomocą *cd* zamiast ezoterycznych komend Git. 

Rozważmy przeglądarki internetowe. Dlaczego wspierają zarówno zakładki jak i wiele okien? Ponieważ daje to możliwość dostosowania do wielu styli. Niektórzy lubią mieć otwarte jedynie jedno okno przeglądarki i używać zakładek dla wielu stron internetowych. Inni upierają się przy drugim ekstremum: wiele okien, bez zakładek. Inni preferują coś pomiędzy. 

Tworzenie gałęzi jest jak zakładki w Twoim katalog roboczym, a klonowanie jest jak otwieranie nowego okna. Te operacje są szybkie i wykonywane lokalnie, więc czemu nie poeksperymentować z kombinacją, która najlepiej Ci pasuje? Git pozwala Ci pracować dokładnie tak jak chcesz.

