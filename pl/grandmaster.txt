== Grandmastery Git ==

Do tej pory powinieneś już być w stanie swobodnie się poruszać po stronach pomocy * git *  i zrozumieć prawie wszystko. Jednak dokładne określenie polecenia potrzebnego do rozwiązania danego problemu może być trudne. Być może mogę zaoszczędzić Ci trochę czasu: poniżej jest kilka receptur, które były mi potrzebne w przeszłości.

=== Wydania źródłowe ===

W moich projektach, Git śledzi jedynie pliki, które chcę archiwizować i udostępniać użytkownikom. Aby utworzyć archiwum z kodem źródłowym, wpisuję:

 $ git archive --format=tar --prefix=proj-1.2.3/ HEAD

=== Zatwierdzam to co się zmieniło ===

Informowanie Git kiedy dodaliśmy, usunęliśmy lub zmieniliśmy nazwę plików jest uciążliwe w przypadku niektórych projektów. Zamiast tego, możesz wpisać:

 $ git add .
 $ git add -u

Git będzie przejrzy pliki w bieżącym katalogu i sam dopracuje szczegóły. Zamiast drugiego polecenia add, wykonaj `git commit -a`, jeśli zamierzasz wykonać commit tym razem. Informacje o tym jak określić pliki, które mają być ignorowane znajdziesz w * gir help ignore *.

Powyższe operacje możesz wykonać za jednym razem:

 $ git ls-files –d –m –o -z | xargs -0 git update-index --add --remove

Opcje *- Z * i *- 0 * zapobiegają dziwnym skutkom ubocznym dodawania plików o nazwach zawierających dziwne znaki. Jak, że to polecenie dodaje ignorowane pliki, możesz chcieć skorzystać z opcji `-X` lub `-X`.

=== Mój Commit jest zbyt duży! ===

Czy zbyt długo zapominałeś wykonywać commit? Czy zawzięcie pisałeś kod i zapomniałeś o kontroli wersji aż do teraz? Wykonałeś szereg niepowiązanych zmian, ponieważ taki jest twój styl?

Nie martw się. Wykonaj:

 $ git add -p

Dla każdej edycji, którą wykonałeś, git pokaże kawałek kodu, który został zmieniony i zapyta, czy powinien należeć on do następnego commit. Odpowiedź "y" lub "n". Masz też inne opcje, takie jak odroczenie decyzji; napisz "?" aby dowiedzieć się więcej.

Gdy jesteś zadowolony, napisz:

 $ git commit

Aby wykonać commit dokładnie wybranych zmian ("staged" changes). Upewnij się, że pominąłeś opcję * -a *, w przeciwnym razie git wykona commit wszystkich zmian.

Co jeśli edytowałeś wiele plików w wielu miejscach? Przeglądanie każdej zmiany staje się frustrujące i paraliżujące umysł. W tym przypadku należy użyć git * add -i *, którego interfejs jest bardziej skomplikowany, ale bardziej elastyczny. za pomocą kilku klawiszy,
można wykonać stage lub unstage na kilku plikach jednocześnie, lub przejrzeć i wybrać zmiany jedynie w konkretnych plikach. Alternatywnie, uruchom komendę * git commit --interactive *, która to automatycznie wykonuje commit po zakończeniu.

=== Indeks: obszar staging Git ===

Do tej pory unikaliśmy słynnego "Index" w Git, ale teraz musimy się z nim zmierzyć, żeby wyjaśnić powyższe. Indeks jest tymczasowym obszarem stage. Git rzadko przerzuca dane bezpośrednio pomiędzy projektem i jego historią. Raczej najpierw zapisuje dane do indeksu, a następnie kopiuje dane z niego do miejsca docelowego.

Na przykład, * commit -a * jest naprawdę procesem dwuetapowym. W pierwszym kroku umieszcza aktualny stan każdego pliku do indeksu. W drugim kroku na stałe zapisuje aktualny stan, który jest obecnie w indeksie. Wykonywanie commit bez opcji * -a * wykonuje tylko drugi krok, i ma sens tylko po wykonaniu poleceń, które w jakiś sposób zmieniają  indeks, takich jak * git add *.

Zazwyczaj możemy ignorować indeks i udawać, że czytamy i zapisujemy prosto z historii. W przypadku gdybyśmy chcieli mieć większą kontrolę, możemy manipulować indeksem. Umieszczamy aktualny stan niektórych, ale nie wszystkich, naszych zmian do indeksu, a następnie na stałe zapisujemy tą dokładnie spreparowaną migawkę.

=== Nie trać głowy (HEAD) ===

Znacznik HEAD jest jak kursor, który wskazuje na ostatni commit, i przesuwa się naprzód z każdym nowym commit. Niektóre komendy git pozwalają go przesunąć. Na przykład:

 $ git reset HEAD~3

przeniesie HEAD trzy commit’y do tyłu. Tak więc wszystkie polecenia git teraz działać tak, jakby te trzy ostatnie commit’y nie istniały, a twoje pliki pozostaną w teraźniejszości. Zobacz stronę pomoc dla niektórych zastosowań.

Ale jak można wrócić do przyszłości? Commit’y w przeszłości nic nie wiedzą o przyszłości.

Jeśli masz SHA1 oryginalnego HEAD możesz wykonać:

 $ git reset 1b6d

Ale załóżmy, że nigdy go nie zanotowaliśmy? Nie martw się: dla poleceń takich jak te, Git zapisuje oryginalny HEAD jako zmienną ORIG_HEAD, więc możesz powrócić cały i zdrowy poleceniem:

 $ git reset ORIG_HEAD

=== Polowanie na głowy (HEAD) ===

Może się zdarzyć, że ORIG_HEAD nie wystarczy. Być może zrobiłeś  monumentalny błąd i musisz wrócić do starego commit’a w dawno zapomnianej gałęzi.

Domyślnie, Git trzyma commit’y przez co najmniej dwa tygodnie, nawet w przypadku wydania Git polecenia, by zniszczyć gałąź, która je zawiera. Problem polega na znalezieniu odpowiedniego hash’a. Możemy zobaczyć wszystkie wartości hash w `.git/objects` i metodą prób i błędów znaleźć ten, którego szukamy. Ale jest znacznie łatwiejszy sposób.

Git rejestruje każdy hash commit’a w `.git/logs`. Podkatalog `refs` zawiera historię wszystkich działań na wszystkich gałęziach, podczas gdy plik `HEAD` pokazuje wszystkie wartości hash kiedykolwiek przyjął. Ten ostatni może być używany do znalezienia hash’y z commit’ów w gałęziach, które zostały przypadkowo usunięte.

Komenda reflog dostarcza przyjazny interfejs do przeglądania plików dziennika. Wypróbuj:

  $ git reflog

Zamiast wycinać i wklejać skróty z reflog, spróbuj:

 $ git checkout "@{10 minutes ago}"

lub przywróć 5. ostatnio odwiedzany commit za pomocą:

 $ git checkout "@{5}"

Więcej informacji w sekcji ``Specifying Revisions'' w pomocy git * git help rev-parse *.

Możesz skonfigurować dłuższy okres przetrzymywania skazanych (usuniętych) commit’ów. Na przykład:

  $ git config gc.pruneexpire "30 days"

oznacza, że usunięte commit’y będą utracone po upływie 30 dni
i * git gc * zostanie uruchomiony.

Możesz również wyłączyć automatyczne uruchamianie * git gc *:

  $ git config gc.auto 0

w takim przypadku commit’y będą usuwane po uruchomieniu * git gc * ręcznie.

=== Budowanie na Git === 

W prawdziwie UNIX’owym stylu, Git jest tak zaprojektowany, aby mógł być łatwo wykorzystany jako składnik niskopoziomowy innych programów, takich jak interfejsy GUI czy sieciowe, alternatywne interfejsy linii poleceń, narzędzia zarządzania łatkami, narzędzia do importu czy konwersji i tak dalej. W rzeczywistości, niektóre polecenia Git same są skryptami stojącymi na ramionach olbrzyma. Przy odrobinie majsterkowania, można dostosować Git do własnych preferencji.

Jedna z prostszych sztuczek polega na użyciu wbudowanych aliasów Git aby uprościć najczęściej używane polecenia:

  $ git config --global alias.co checkout
  $ git config --global --get-regexp alias # wyświetlenie bieżącego aliasu alias.co checkout
  $ git co foo # to samo co 'git checkout foo'

Można też wydrukować nazwę bieżącej gałęzi w tytule polecenia lub okna.
Wywołanie:

  $ git symbolic-ref HEAD

pokazuje aktualną nazwę gałęzi. W praktyce, prawdopodobnie będziesz chciał usunąć "refs/heads/" i ignorować błędy:

  $ git symbolic-ref HEAD 2> /dev/null | cut -b 12-

Podkatalog + contrib + jest skarbnicą narzędzi zbudowanych na Git.
Z czasem, niektóre z nich mogą zostać promowane do statusu oficjalnych poleceń. W Debianie i Ubuntu, ten katalog znajduje się w + /usr/share/doc/git-core/contrib +.

Jednym z popularnych poleceń jest + workdir/git-new-workdir +. Przez  sprytne linki symboliczne, skrypt tworzy nowy katalog, którego historia jest dzielona z oryginalnym repozytorium:

  $ git-new-workdir /istniejące/repo nowy/katalog

Nowy katalog i pliki w mogą być traktowane jako klon, z wyjątkiem faktu, że ponieważ historia jest wspólna, dwa drzewa automatycznie pozostają zsynchronizowane. Nie ma potrzeby wykonywania merge, push, lub pull.

=== Odważne sztuki kaskaderskie ===

Współcześnie, Git utrudnia użytkownikowi przypadkowe zniszczenie danych.
Ale jeśli wiesz, co robisz, można obejść zabezpieczenia podstawowych poleceń.

* Checkout *: Zmiany po których nie wykonano commit powodują niepowodzenie checkout. Aby zniszczyć te zmiany i wykonać checkout, należy użyć flagi force:

  $ git checkout -f HEAD^

Z drugiej strony, jeśli podasz konkretne ścieżki dla checkout, to nie będzie żadnej kontroli bezpieczeństwa. Domyślne ścieżki zostaną cicho nadpisane. Miej się na baczności, jeśli używasz checkout w ten sposób.

* Reset *: Reset również zawiedzie w obliczu niezatwierdzonych zmian. Aby wymusić wykonaj:

  $ git reset --hard 1b6d

* Branch *: Usuwanie gałęzi się nie powiedzie, jeśli miałoby sprawić, że zmiany zostaną utracone. Aby wymusić usunięcie:

  $ git branch -D dead_branch # zamiast -d

Podobnie, próba nadpisania gałęzi poprzez przenoszenie nie powiedzie się, jeśli miałaby z tego wyniknąć utrata danych. Aby wymusić przeniesienie gałęzi napisz:

  $ git branch -M źródło cel # zamiast -m

W przeciwieństwie do chekcout i reset, te dwa polecenia odraczają zniszczenia danych. Zmiany są nadal przechowywane w podkatalogu .git i mogą być odtworzone przez odzyskanie odpowiednich hash’y  z `.git/logs` (patrz "Polowanie na głowy (HEAD)" powyżej). Domyślnie, będą przechowywane przez co najmniej dwa tygodnie.

* Clean *: Niektóre polecenia git odmawiają wykonania, gdyż martwią się o
zniszczenie nieśledzonych plików. Jeżeli jesteś pewien, że wszystkie nieśledzone pliki i katalogi są zbędne, a następnie usunąć je bezlitośnie za pomocą:

  $ git clean –f -d

Następnym razem, to paskudne polecenie zadziała!

=== Zapobieganie złym commit’om ===

Głupie błędy zanieczyszczają moje repozytoria. Najbardziej przerażające są brakujące pliki z powodu zapomnienia wykonania * git add *. Mniejszymi grzechami są białe znaki na końcu i nierozwiązane konflikty podczas scalania: choć nieszkodliwe, chciałbym, żeby nigdy nie zostały upublicznione.

Gdybym tylko wykupił idiotyczne ubezpieczenie przez używanie _hook_ które informowałoby mnie o tych problemach:

 $ cd .git/hooks
 $ cp pre-commit.sample pre-commit # Starsze wersje Git: chmod +x pre-commit

Teraz Git przerwie commit jeśli wykryje bezużyteczny białe znaki lub nierozwiązane konflikty.

Dla tego przewodnika, w końcu dodałem następujący kod na początku hook’a
* pre-commit * w celu ochrony przed roztargnieniem:

 if git ls-files -o | grep '\.txt$’; then
   echo FAIL! Nieśledzone pliki .txt
   exit 1
 fi

Kilka operacji git wspiera hooks, zobacz * git help hooks *. Aktywowaliśmy prosty hook * post update * wcześniej przy omawianiu Git za pośrednictwem protokołu HTTP. Uruchamia się zawsze, gdy HEAD się przemieszcza. Prosty skrypt post-update aktualizuje pliki, które Git potrzebuje do komunikacji przez transportu, taki jak HTTP.
