== Wstęp ==

Użyję analogii żeby opisać system kontroli wersji. Dla lepszego wyjaśnienia zobacz http://pl.wikipedia.org/wiki/System_kontroli_wersji[artukuł w Wikipedii opisujący systemy kontroli wersji].

=== Praca to zabawa ===

Grałem w gry komputerowe prawie całe moje życie. Dla porównania systemów kontroli wersji zacząłem używać już, jako dorosły i podejrzewam, że nie jestem jedyny oraz, że porównanie tych dwóch koncepcji ułatwi tłumaczenie i zrozumienie tematu.

Myśl o edytowaniu kodu lub dokumentu, jako o graniu w grę. Po przejściu wielu poziomów chciałbyś ją zapisać. Aby to zrobić klikasz przycisk 'Zapisz' w swoim ulubionych edytorze.

Tylko, że taki zapis nadpisze starą wersję. To jak z tymi starymi, old-school'owymi, grami, w których był tylko jeden slot na zapis: jasne, mogłeś zapisać, ale nie mogłeś nigdy wrócić do starszego zapisu. Trochę tego szkoda, bo poprzednio gra mogła być zapisana w jakimś wyjątkowo fajnym momencie, do którego chciałbyś pewnego dnia powrócić. Albo gorzej: Twój aktualny zapisany stan gry jest w momencie, w którym już nie możesz wygrać i niestety będziesz musiał zaczynać od nowa.

=== Kontrola Wersji ===

Podczas edycji możesz „Zapisać jako…” inny plik, albo skopiować go do innej lokalizacji przed zapisem aby ocalić poprzednią wersję. Możesz również go skompresować, aby oszczędzić trochę miejsca na dysku. Są to zabiegi kontroli wersji dość prymitywne i wymagające sporo zachodu. Gry komputerowe zostały już dawno usprawnione pod tym kątem, poprzez dodanie automatycznego znakowania czasem slotów na zapisane gry. 

Wyobraźmy sobie sytuację odrobinę bardziej skomplikowaną. Powiedzmy, że masz kilka plików, które należą do jednej „paczki”, na przykład kod źródłowy projektu albo pliki strony Internetowej. W takiej sytuacji jeśli chciałbyś trzymać ich stare wersje musiałbyś archiwizować cały katalog. Trzymanie w ten sposób wielu wersji jest niewygodne i szybko staje się mało opłacalne.

Wiele gier komputerowych przechowuje zapisane gry jako katalogi pełne plików. Te gry ukrywają przed graczami informacje na temat tej struktury, zamiast tego oferują wygodny interfejs umożliwiający zarządzanie wersjami tych katalogów. 

Systemy kontroli wersji działają tak samo. Wszystkie mają przyjazne interfejsy do zarządzania katalogami z treścią. Możesz zapisywać stan takiego katalogu jak tylko często chcesz, a później wczytywać dowolny z tych zapisów. Dodatkowo, w przeciwieństwie do większości gier komputerowych, systemy kontroli wersji bardzo dbają o oszczędność miejsca na dysku. Typowym zjawiskiem jest to, że pomiędzy kolejnymi wersjami zmieniają się tylko poszczególne pliki i to w niedużym stopniu. Przechowywanie jedynie różnic pomiędzy nimi, a nie ich całych kopii bardzo oszczędza miejsce.

=== Rozproszona Kontrola ===

Wyobraź sobie wyjątkowo trudną grę komputerową. Tak trudną, że do jej ukończenia zebrali się doświadczeni gracze z całego świata aby dzielić się swoimi zapisanymi grami. Speedrun’y to przykład z życia wzięty: gracze specjalizujący się w różnych typach poziomów w grze współpracują, aby osiągnąć niesamowite wyniki.

Jak zorganizowałbyś system, który pozwalałby na swobodną wymianę zapisanych stanów gry? Umożliwiający wgrywanie nowych?

Dawniej każdy projekt używał zcentralizowanej kontroli wersji. Umieszczony gdzieś serwer przechowywał wszystkie zapisane gry. Nikt inny. Każdy z graczy miał u siebie jedynie kilka takich zapisów. Kiedy ktoś chciał przejść dalej w grze, ściągał najświeższy zapisany stan gry z głównego serwera, grał trochę, zapisywał, a potem wgrywał stan z powrotem na serwer, żeby inni mogli go użyć.

A co jeśli z jakiegokolwiek powodu gracz chciał dostać się do starej wersji zapisanej gry? Na przykład gra znalazła się w punkcie uniemożliwiającym jej zakończenie, ponieważ ktoś zapomniał zebrać konkretny przedmiot na poziomie trzecim i trzeba się cofnąć do momentu kiedy będzie można jeszcze ukończyć rozgrywkę? Albo gracze chcieliby porównać dwie wersje starych zapisanych gier, żeby porównać, ile pracy włożył każdy z nich?

Może być wiele powodów dla których chcemy zobaczyć starsze wersje, ale rezultat jest taki sam. Trzeba poprosić centralny serwer aby zobaczyć żądaną wersję zapisanej gry. Im więcej zapisów potrzebujesz tym więcej trzeba się komunikować. 

Nowa generacja systemów kontroli wersji, do której należy Git, jest znana jako rozproszone i może być postrzegana jako uogólnienie systemów zcentralizowanych. Kiedy gracz ściąga informacje z głównego serwera to dostają wszystkie zapisane gry, nie tylko najświeższą. To tak, jak by robili lustrzaną kopię centralnego serwera.

Ta początkowa operacja klonowania może być kosztowna, zwłaszcza jeśli istnieje długa historia zmian, ale zwraca się w dłuższej perspektywie. Zaletą jest to, że jeśli tego z jakiegokolwiek powodu chcemy, to od razu mamy dostęp do każdego zapisanego stanu gry bez potrzeby komunikowania się z centralnym serwerem.

=== Naiwny przesąd ===

Popularne jest przeświadczenie, że rozproszone systemy kontroli wersji nie nadają się do projektów wymagających oficjalnego, centralnego repozytorium. Nie mogłoby być ono dalsze od prawdy. Zrobienie komuś zdjęcia nie sprawi, że skradniemy mu duszę. Podobnie, klonowanie głównego repozytorium nie ujmie mu nic na ważności.

Dobrym pierwszym spojrzeniem na na rozproszony system kontroli wersji jest to, że może on zrobić wszystko tak dobrze jak zcentralizowany, a nawet lepiej. Wykorzystywanie sieciowych zasobów jest po prostu droższe niż lokalnych. W późniejszej części zapoznamy się z wadami takiego rozproszonego podejścia, mając jednak w pamięci te zasadę popełnimy mniej błędów przy porównywaniu tych rozwiązań.

Mały projekt może wymagać jedynie ułamka funkcji oferowanych przez taki system, ale używanie rozwiązań mało skalowalnych jest jak używanie rzymskich liczb jedynie w obliczeniach na małych liczbach. 

Co więcej, Twój projekt może urosnąć o wiele bardziej niż początkowo zakładałeś. Używanie Git’a od samego początku jest jak noszenie przy sobie szwajcarskiego scyzoryka, mimo że głównie używasz go do otwierania butelek. W dniu, kiedy desperacko będziesz potrzebował śrubokręta ucieszysz się, że masz przy sobie coś więcej niż otwieracz do butelek.

=== Scalanie Konfilktów ===

Dla tego tematu trudno będzie nam wykorzystać analogię do gry komputerowej. Zamiast tego posłużymy się przykładem edycji dokumentu. 

Przypuśćmy, że Alice wstawia linijkę na początku pliku, a Bob dodaję jedną na końcu własnej kopii. Oboje wgrywają swoje zmiany. Większość systemów automatycznie na podstawie dedukcji uwzględni zmiany obojga i scali je w jednym dokumencie.

Teraz przypuśćmy, że Alice I Bob oboje dokonali zmian w tej samej linijce tekstu. W takim przypadku system nie poradzi sobie bez intewrwencji ludzkiej. Druga w kolejności osoba wgrywająca swoje zmiany zosanie poinformowana o _merge conflict_ ( konflikcie scalania )i musi wybrać która wersja pozostanie lub poprawić całą linijkę od nowa.

Mogą się też pojawić o wiele bardziej skomplikowane sytuacje. Systemy kontroli wersji mogą sobie same poradzić prostymi przypadkami, a trudne pozostawić ludziom. Przeważnie ich zachowanie w takich sytuacjach jest konfigurowalne.

